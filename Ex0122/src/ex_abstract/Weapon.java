package ex_abstract;

public abstract class Weapon { // -> 추상클래스로 만들자.
	// -> 추상클래스의 생김새
	// class앞에 abstract가 작성
	// 추상클래스가 되는 이유 2가지.
	// 1. 하나이상의 추상메서드를 가지고 있는경우.
	// 2. class앞에 abstract라고 작성하는 경우(추상메서드가 없어도 됩니다.)
	// 3. 추상클래스 안에 추상메서드가 없어도 된다. 단 추상메서드가 단한개라도 있다면 추상클래스가 된다.
	// 추상클래스에는 일반 메소드가 있어도 된다.
	
	// 추상메서드의 역할
	// 상속받은 하위클래스 (자식클래스)"" 반드시 "" 구현 해야하는 메소드.
	
	
	// Weapon클래스의 역활: 검, 도끼, 창, 등 무기들의 기능들을 상속받을수 있도록.
	// 기능(메서드)를 작성해 놓은 클래스
	
	// 기능(메소드) 2가지만 설계
	
	public void stab() { // -> 추상메소드 만들자.
		// 찌르기 기능 (메소드) 구현.
		// 메소드 만드는 방법: 접근제한자, 리턴타입, 메소드명 (매개변수)
		System.out.println("찌르기");
		
	}
	
	public abstract void stab2();
	
	
	// 2
	public void attack() { 
		// 공격 기능(메소드)구현
		System.out.println("공경하기");		
	}
	
	public abstract void attack2(); // 추상메서드로 만들자.
	// 추상메서드의 생김새: body({})가 생략.
	// 뒤에 세미콜론(;)으로 마무리.
	// return 타입앞에 abstract라는 키워드를 사용.
	
	// 추상메서드의 역할
	// 상속받은 하위클래스 (자식클래스)"" 반드시 "" 구현 해야하는 메소드.
	

}
